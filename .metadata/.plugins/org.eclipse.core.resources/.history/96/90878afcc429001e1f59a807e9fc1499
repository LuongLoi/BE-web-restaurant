package com.intern.restaurant;

import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.intern.restaurant.dto.UserDTO;
import com.intern.restaurant.model.User;
import com.intern.restaurant.repository.UserRepository;
import com.intern.restaurant.service.UserService;

import java.util.Optional;
import java.util.UUID;

import static org.assertj.core.api.Assertions.*;

public class UserServiceTestGet {
    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private UserService userService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetUserByID_ExistingID_ShouldReturnUser() {
        // Arrange
        int userId = 123;
        Optional<User> user = Optional.empty();
        user.get().setUs_id(userId);
        when(userRepository.findById(userId)).thenReturn(user);

        // Act
        UserDTO resultUser = userService.getUserById(userId);

        // Assert
        assertThat(resultUser).isNotNull();
        assertThat(resultUser.getId()).isEqualTo(userId);
        verify(userRepository, times(1)).findById(userId);
    }

    @Test
    public void testGetUserByID_NonExistingID_ShouldReturnNull() {
        // Arrange
        int userId = 456;
        when(userRepository.findById(userId)).thenReturn(null);

        // Act
        UserDTO resultUser = userService.getUserById(userId);

        // Assert
        assertThat(resultUser).isNull();
        verify(userRepository, times(1)).findById(userId);
    }
}
