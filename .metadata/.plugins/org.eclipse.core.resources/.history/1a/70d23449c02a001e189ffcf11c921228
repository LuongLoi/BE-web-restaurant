package com.intern.restaurant.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.intern.restaurant.dto.UserDTO;
import com.intern.restaurant.dto.UserUpdateDTO;
import com.intern.restaurant.exception.UserException;
import com.intern.restaurant.exception.UserNotFoundException;
import com.intern.restaurant.mapper.UserMapper;
import com.intern.restaurant.model.User;
import com.intern.restaurant.repository.UserRepository;

@Service
public class UserServiceImpl implements UserService {
	
	private UserRepository userRepository;
	
	@Autowired
    public UserServiceImpl(UserRepository userRepository) {
        this.userRepository = userRepository;
    }
	
	@Override
	public User createUser(User user) {
		// TODO Auto-generated method stub
		Optional<User> existingMobile = userRepository.findByMobile(user.getMobile());
		Optional<User> existingEmail = userRepository.findByEmail(user.getEmail());
		Optional<User> existingUsername = userRepository.findByUsername(user.getUsername());

		if(existingMobile.isPresent() || existingEmail.isPresent() || existingUsername.isPresent())
			throw new UserException("User already exists");
		return userRepository.save(user);
	}
	
	@Override
	public User createUser(String username, String password, String fullname,String mobile,String email, String address) {
		User user = User.builder()
				.us_id(0)
				.username(username)
				.password(password)
				.fullname(fullname)
				.mobile(mobile)
				.email(email)
				.address(address)
				.created_data(LocalDateTime.now())
				.group(0)
				.status(0)
				.update_password(0)
				.build();
		Optional<User> existingMobile = userRepository.findByMobile(user.getMobile());
		Optional<User> existingEmail = userRepository.findByEmail(user.getEmail());
		Optional<User> existingUsername = userRepository.findByUsername(user.getUsername());

		if(existingMobile.isPresent() || existingEmail.isPresent() || existingUsername.isPresent())
			throw new UserException("User already exists");
		return userRepository.save(user);
	}

	@Override
	public List<UserDTO> getAllUser() {
		// TODO Auto-generated method stub
		List<UserDTO> userDtos = new ArrayList<>();
		for (User user : userRepository.findAll()) {
			userDtos.add(UserMapper.toUserDTO(user));
		}
		if (userDtos.size() == 0) 
			throw new UserNotFoundException("No record exists");
		return userDtos;
	}
	
	@Override
	public UserDTO getUserById(int id) {
		// TODO Auto-generated method stub
		Optional<User> o_user = userRepository.findById(id);
		if (!o_user.isPresent())
			throw new UserNotFoundException("User not found");
		else
			return UserMapper.toUserDTO(o_user);
	}

	@Override
	public UserDTO getUserByMobile(String mobile) {
		// TODO Auto-generated method stub
		Optional<User> o_user = userRepository.findByMobile(mobile);
		if (!o_user.isPresent())
			throw new UserNotFoundException("User not found");
		else
			return UserMapper.toUserDTO(o_user);
	}

	@Override
	public UserDTO getUserByEmail(String email) {
		// TODO Auto-generated method stub
		Optional<User> o_user = userRepository.findByEmail(email);
		if (!o_user.isPresent())
			throw new UserNotFoundException("User not found");
		else
			return UserMapper.toUserDTO(o_user);
	}

	@Override
	public boolean updateUser(String username,UserUpdateDTO userUpdateDto) {
		// TODO Auto-generated method stub
		Optional<User> o_user = userRepository.findByUsername(username);
		if (o_user.isPresent()) {
			User user = o_user.get();
			user.setPassword(userUpdateDto.getPassword());
			user.setFullname(userUpdateDto.getFullname());
			user.setAddress(userUpdateDto.getAddress());
			user.setMobile(userUpdateDto.getMobile());
			user.setEmail(userUpdateDto.getEmail());
			userRepository.save(user);
			return true;
		}
		return false;
	}

	@Override
	public boolean updateUserPassword(String username,String newPassword) {
		// TODO Auto-generated method stub
		Optional<User> o_user = userRepository.findByUsername(username);
		if (o_user.isPresent()) {
			User user = o_user.get();
			user.setPassword(newPassword);
			user.setUpdate_password(1);
			userRepository.save(user);
			return true;
		}
		return false;
		
	}

	@Override
	public boolean updateUserEmail(String username, String email) {
		// TODO Auto-generated method stub
		Optional<User> o_user = userRepository.findByUsername(username);
		if (o_user.isPresent()) {
			User user = o_user.get();
			user.setPassword(email);
			userRepository.save(user);
			return true;
		}
		return false;
	}

	@Override
	public boolean updateUserMobile(String username, String mobile) {
		// TODO Auto-generated method stub
		Optional<User> o_user = userRepository.findByUsername(username);
		if (o_user.isPresent()) {
			User user = o_user.get();
			user.setPassword(mobile);
			userRepository.save(user);
			return true;
		}
		return false;
	}

	@Override
	public void deleteAll() {
		// TODO Auto-generated method stub
		userRepository.deleteAll();
	}

	@Override
	public void deleteById(int id) {
		// TODO Auto-generated method stub
//		Optional<User> o_user = userRepository.findById(id);
//		if (!o_user.isPresent())
//			throw new UserNotFoundException("User not found");
//		else 
			userRepository.deleteById(id);
	}
	
}
